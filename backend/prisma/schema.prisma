// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ContestStatus {
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

enum SheetType {
  FREE
  PREMIUM
}

model User {
  id                     String          @id @default(uuid())
  name                   String
  email                  String          @unique
  image                  String?
  role                   UserRole        @default(USER)
  password               String
  refreshToken           String? // For JWT refresh tokens
  passwordResetToken     String? // For password reset
  passwordResetExpiry    DateTime? // Expiry for reset token
  lastLoginAt            DateTime? // Track last login
  isActive               Boolean         @default(true) // Account status
  emailVerified          Boolean         @default(false) // Email verification
  emailVerificationToken String? // Email verification token
  promotedBy             String? // Track who promoted this user
  promotedAt             DateTime? // When they were promoted
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  problems               Problem[]
  submission             Submission[]
  problemSolved          ProblemSolved[]
  playlists              Playlist[]

  // New relations for contests
  contestParticipants ContestParticipant[]
  contestSubmissions  ContestSubmission[]
  contestLeaderboard  ContestLeaderboard[]

  // New relations for sheets
  userSheets    UserSheet[]
  sheetProgress SheetProgress[]
  payments      Payment[]

  // New relations for role changes
  promotedUsers RoleChange[] @relation("PromotedBy")
  roleChanges   RoleChange[] @relation("UserRoleChanges")

  // Session management
  userSessions UserSession[]

  @@index([email])
  @@index([refreshToken])
  @@index([passwordResetToken])
}

model RoleChange {
  id           String   @id @default(uuid())
  userId       String
  changedBy    String
  previousRole UserRole
  newRole      UserRole
  reason       String? // Optional reason for role change
  createdAt    DateTime @default(now())

  user          User @relation("UserRoleChanges", fields: [userId], references: [id], onDelete: Cascade)
  changedByUser User @relation("PromotedBy", fields: [changedBy], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([changedBy])
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  //RelationShips
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]

  // New relations
  contestSubmissions ContestSubmission[]
  sheetProgress      SheetProgress[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String //Accepted , wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String              @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  problems    ProblemInPlaylist[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) //unique playlist name per user
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}

model Contest {
  id              String        @id @default(uuid())
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  duration        Int // in minutes
  problemIds      String[] // Array of problem IDs
  maxParticipants Int?
  status          ContestStatus @default(UPCOMING)
  rules           Json? // Contest specific rules
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  participants ContestParticipant[]
  submissions  ContestSubmission[]
  leaderboard  ContestLeaderboard[]
}

model ContestParticipant {
  id           String   @id @default(uuid())
  userId       String
  contestId    String
  registeredAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model ContestSubmission {
  id          String   @id @default(uuid())
  userId      String
  contestId   String
  problemId   String
  sourceCode  Json
  language    String
  status      String // AC, WA, TLE, etc.
  score       Int      @default(0)
  penalty     Int      @default(0) // time penalty in minutes
  submittedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model ContestLeaderboard {
  id             String    @id @default(uuid())
  userId         String
  contestId      String
  totalScore     Int       @default(0)
  penalty        Int       @default(0)
  rank           Int       @default(0)
  problemsSolved Int       @default(0)
  lastSubmission DateTime?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
  @@index([contestId, totalScore, penalty])
}

model Sheet {
  id             String     @id @default(uuid())
  title          String
  description    String
  topic          String
  difficulty     Difficulty
  problemIds     String[]
  price          Float      @default(0) // 0 means free
  type           SheetType  @default(FREE)
  estimatedHours Int?
  prerequisites  String[]
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  userSheets UserSheet[]
  progress   SheetProgress[]
}

model UserSheet {
  id          String   @id @default(uuid())
  userId      String
  sheetId     String
  purchasedAt DateTime @default(now())
  paymentId   String? // Payment gateway transaction ID
  amount      Float
  isActive    Boolean  @default(true)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sheet Sheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  @@unique([userId, sheetId])
}

model SheetProgress {
  id          String    @id @default(uuid())
  userId      String
  sheetId     String
  problemId   String
  completed   Boolean   @default(false)
  completedAt DateTime?
  attempts    Int       @default(0)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sheet   Sheet   @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, sheetId, problemId])
}

model Payment {
  id               String   @id @default(uuid())
  userId           String
  sheetId          String?
  amount           Float
  currency         String   @default("INR")
  paymentGateway   String // razorpay, stripe
  gatewayOrderId   String
  gatewayPaymentId String?
  status           String // pending, completed, failed, refunded
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  deviceInfo   String? // Browser, OS, etc.
  ipAddress    String?
  refreshToken String   @unique
  isActive     Boolean  @default(true)
  lastUsed     DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
}
